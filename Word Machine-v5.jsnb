{
  "metadata": {
    "name": "Word Machine<br>",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<h1 style = \"text-align: center\"> Word Machine </h1>\n<p> The aim of this game is to get as many points as possible while not getting caught. You manage to not get caught by spelling the correct word which completes the question mark  shown in the top bar. </p>",
      "status": "",
      "output": "<h1 style=\"text-align: center\"> Word Machine </h1>\n<p> The aim of this game is to get as many points as possible while not getting caught. You manage to not get caught by spelling the correct word which completes the question mark  shown in the top bar. </p>",
      "type": "html"
    },
    {
      "code": "<h3 style = \"text-align: center;\"> Please run the cell below to start the game. After running the cell, every keypress will be tested for the input. So only use a mouse to scroll and run the cell below.</h3>",
      "status": "",
      "output": "<h3 style=\"text-align: center;\"> Please run the cell below to start the game. After running the cell, every keypress will be tested for the input. So only use a mouse to scroll and run the cell below.</h3>",
      "type": "html"
    },
    {
      "code": "<input type=\"file\" id=\"pdf-input\">",
      "status": "",
      "output": "<input type=\"file\" id=\"pdf-input\">",
      "type": "html"
    },
    {
      "code": "await scrib.loadScript(\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.16.105/pdf.min.js\");\ndocument.getElementById('pdf-input').addEventListener('change', handleFileSelect);\n\nasync function handleFileSelect(event) {\n  scrib.show(\"The processing started\");\n    const file = event.target.files[0];\n    if (file) {\n        try {\n            const arrayBuffer = await file.arrayBuffer();\n            const pdf = await pdfjsLib.getDocument({\n                data: arrayBuffer\n            }).promise;\n\n            let textContent = '';\n            for (let pageNum = 1; pageNum <= pdf.numPages; pageNum++) {\n                const page = await pdf.getPage(pageNum);\n                const text = await page.getTextContent();\n                text.items.forEach(item => {\n                    textContent += item.str + ' ';\n                });\n            }\n\n            // Extract 5-letter words and convert them to lowercase\n            const fiveLetterWords = extractFiveLetterWords(textContent);\n            const lowerCaseWords = fiveLetterWords.map(word => word.toLowerCase());\n\n            // Remove duplicates by converting to a Set and then back to an array\n            const uniqueFiveLetterWords = [...new Set(lowerCaseWords)];\n\t\t  \twindow.words = uniqueFiveLetterWords;\n\t\t  \tscrib.show(\"Processing completed\");\n        } catch (error) {\n            console.error('Error processing PDF:', error);\n        }\n    }\n}\n\nfunction extractFiveLetterWords(text) {\n    const fiveLetterWords = text.match(/\\b[a-zA-Z]{5}\\b/g) || [];\n    return fiveLetterWords;\n}",
      "status": "[1]<br><span style=\"font-size:8px\">564ms<span></span></span>",
      "output": "The processing started <br>Processing completed <br>",
      "type": "code"
    },
    {
      "code": "<style>\n  .con{\n    display: flex;\n    justify-content: center;\n    border-radius: 0.3em;\n  }\n    .box{\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 3em;\n      height: 3em;\n      margin : 0.3em;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      background-color: #ffff00;\n      border: 0.07em solid #404040;\n      border-radius: 0.3em;\n      text-align: center;\n      font-size: 1.5em;\n      color : #000000;\n\t  user-select : none;\n    }\n\t.score{\n\t  display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 5em;\n      height: 3em;\n      margin : 0.3em;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      background-color: #D0F2EF;\n      border: 0.07em solid #404040;\n      border-radius: 0.3em;\n      text-align: center;\n      font-size: 1.5em;\n      color : #000000;\n\t  user-select : none;\n\t}\n</style>\n  <div id = \"container\" class = \"con\">\n\t<div class = \"box\"><strong id = \"t0\">A</strong></div>\n\t<div class = \"box\"><strong id = \"t1\">B</strong></div>\n\t<div class = \"box\"><strong id = \"t2\">C</strong></div>\n\t<div class = \"box\"><strong id = \"t3\">D</strong></div>\n\t<div class = \"box\"><strong id = \"t4\">E</strong></div>\n\t<div class = \"score\"><strong id = \"sText\">Score : 0</strong></div>\n  </div>\n<div style = \"text-align:center;\">\n  <canvas id='canvas' width = \"1000px\" height = \"600px\"></canvas>\n</div>",
      "status": "",
      "output": "<style>\n  .con{\n    display: flex;\n    justify-content: center;\n    border-radius: 0.3em;\n  }\n    .box{\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 3em;\n      height: 3em;\n      margin : 0.3em;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      background-color: #ffff00;\n      border: 0.07em solid #404040;\n      border-radius: 0.3em;\n      text-align: center;\n      font-size: 1.5em;\n      color : #000000;\n\t  user-select : none;\n    }\n\t.score{\n\t  display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 5em;\n      height: 3em;\n      margin : 0.3em;\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      background-color: #D0F2EF;\n      border: 0.07em solid #404040;\n      border-radius: 0.3em;\n      text-align: center;\n      font-size: 1.5em;\n      color : #000000;\n\t  user-select : none;\n\t}\n</style>\n  <div id=\"container\" class=\"con\">\n\t<div class=\"box\"><strong id=\"t0\">A</strong></div>\n\t<div class=\"box\"><strong id=\"t1\">B</strong></div>\n\t<div class=\"box\"><strong id=\"t2\">C</strong></div>\n\t<div class=\"box\"><strong id=\"t3\">D</strong></div>\n\t<div class=\"box\"><strong id=\"t4\">E</strong></div>\n\t<div class=\"score\"><strong id=\"sText\">Score : 0</strong></div>\n  </div>\n<div style=\"text-align:center;\">\n  <canvas id=\"canvas\" width=\"1000px\" height=\"600px\"></canvas>\n</div>",
      "type": "html"
    },
    {
      "code": "let textIds = [ ]\nfor(let i = 0; i < 5; i++){\n  textIds[i] = document.getElementById(\"t\" + i);\n}\n\nlet scoreText = document.getElementById(\"sText\");\nscoreText.innerHTML = \"Score : 0\";\n\nwindow.replaceIndex = 0;\nwindow.score = 0;\n\nfunction updateText(){\n  window.word = [...words[Math.ceil(Math.random() * (words.length - 1))].toUpperCase()]; //Convert string to character array since strings are immutable in Js\n  replaceIndex = Math.floor(Math.random() * 4);\n  word[replaceIndex] = '?';\n  for(let i = 0; i < 5; i++){\n\ttextIds[i].innerHTML = word[i];\n  }\n}\n\nupdateText(); //Update the previous test-text \n\nfunction checkInput(event){\n  //TODO: Logic when mouse is on canvas.\n  let check = window.word;\n  check[replaceIndex] = event.key;\n  if(words.includes(check.join(\"\").toLowerCase())){\n\tupdateText();\n\tbird.y = bird.y - 20;\n\tscore++;\n\tscoreText.innerHTML = \"Score : \" + score;\n\tconsole.log(score);\n  }else{\n\tconsole.log(\"You Lose\");\n  }\n}\nconst body = document.querySelector(\"body\");\nbody.addEventListener('keypress',checkInput);",
      "status": "[-]",
      "output": "<p class=\"error\">words is not defined</p>",
      "type": "code"
    },
    {
      "code": "window.thornImg = new Image();\nthornImg.src = \"https://github.com/ShivaVarun-Adicherla/Word-Machine/blob/main/g184.png?raw=true\"; scrib.show(\"\");",
      "status": "[1]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": " <br>",
      "type": "code"
    },
    {
      "code": "window.cvs = document.getElementById('canvas');\nlet render = cvs.getContext(\"2d\");\n\nwindow.bird = {\n    x: 0,\n    y: 0,\n    scale: .5,\n    color: \"#ffff00\",\n    shape: new Path2D(\"M51.9,54c-2.1,2.1-2.7,4.8-2.7,11.6c0,19,11.9,55.5,25,76.7c1.5,2.3,2.6,4.2,2.5,4.2c-0.6,0-12.2-13.5-16.2-18.9l-4.7-6.3l-8.1-2.1c-4.4-1.1-12.7-3.4-18.4-5c-16.8-4.8-19.3-5.1-19.3-2.1c0,0.9,0.5,4.4,1.1,7.8c4.1,24,17.1,45.1,37.1,60.4c28.9,22,67.7,28.8,101.3,17.8c27.8-9.1,50.1-29.4,64.5-58.7c1.7-3.5,3.2-6.6,3.3-7c0.1-0.3,6.6-2,14.5-3.6c7.8-1.7,14.2-3.3,14.2-3.4c0-0.2-4.5-4.2-10.1-8.9l-10.1-8.6l-0.2-6.6c-0.1-5.6-0.4-7.4-1.6-11c-3.9-11.5-12.6-21.1-23.7-26.3c-6.1-2.9-11.4-4-18.5-4c-17,0.1-32.1,9.6-40.1,25.5l-2.3,4.5l3.9,5c4.5,5.7,8.2,11.1,10.7,15.9c2.1,3.7,1.8,3.6-2.1-1.5c-4.8-6-14-13.5-28.5-23.2c-23.1-15.4-47.9-28.4-61.6-32.4C55.7,52.1,53.8,52.1,51.9,54z M197.8,87.8c8.8,5.6,4.8,19.6-5.7,19.7c-9.1,0.1-14.1-9.4-9-17C186.1,86.1,193,84.8,197.8,87.8z\")\n};\n\nfunction drawBird() {\n    render.save(); // Save the current context state\n\n    // Apply transformations\n    render.translate(bird.x, bird.y);\n    render.scale(bird.scale, bird.scale);\n\n    // Draw the bird\n    render.fillStyle = bird.color;\n    render.fill(bird.shape);\n\n    render.restore(); // Restore the context to its original state\n}\n\nfunction updateBird(){\n  bird.y = bird.y + 0.05;\n  if(bird.y > cvs.height -200){\n\t//Call Game Over Function\n\tbird.y = cvs.height -200; //Temporary Clamp function\n  }\n}\n\n//Init all the clouds\nlet cloudArray = [ ];\nfor(i = 0; i < 15; i++){\n  let x = Math.random() * cvs.width;\n  let y = Math.random() * cvs.height/1.5;\n  let depth = Math.random() * 250 +50;\n  let size = Math.random() * 30 + 40;\n  cloudArray.push({ x : x, y : y, depth : depth, size : size});\n}\n\nfunction drawBackground(){\n  \trender.save();\n  \trender.fillstyle = \"#AAFCFF\";\n  \trender.fillRect(0,0,cvs.width,cvs.height);\n  \trender.fillStyle = \"rgb(175, 214, 216)\";\n  \trender.beginPath();\n  \tfor(i = 0; i < 15; i++){\n\t  cloudArray[i].x -= 10 / cloudArray[i].depth ;\n\t  if(cloudArray[i].x < -140){\n\t\tcloudArray[i].x = cvs.width + 10;\n\t\tcloudArray[i].y = Math.random() * cvs.height/2;\n\t\tcloudArray[i].depth = Math.random() * 250 +50;\n\t\tcloudArray[i].size = Math.random() * 30 + 40;\n\t  }\n\t  render.rect(cloudArray[i].x,cloudArray[i].y,\n\t\t\t\t  cloudArray[i].size * 2/(cloudArray[i].depth * 0.01 + 1),cloudArray[i].size /(cloudArray[i].depth * 0.01 + 1));\n\t  \n\t}\n  \trender.fill();\n  \trender.restore();\n}\n\nlet positionX = 0;\nfunction drawThornGround(){\n  \trender.save();\n  \tpositionX -= 0.2;\n  \tif(positionX < -1000){\n\t  positionX = 0;\n\t}\n  \trender.translate(positionX,0);\n  \trender.drawImage(thornImg,0,cvs.height - 99);\n  \trender.restore();\n}\n\nfunction animate() {\n    render.clearRect(0, 0, cvs.width, cvs.height); // Clear the canvas\n  \tdrawBackground();\n    drawBird();\n  \tupdateBird();\n  \tdrawThornGround();\n    requestAnimationFrame(animate);\n}\n\nanimate();\n",
      "status": "[34]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}